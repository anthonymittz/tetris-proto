{"version":3,"file":"tetris.js","mappings":"+eAAA,I,MAAMA,EAAW,CACfC,iBAAkBC,SAASC,eAAe,qBAC1CC,WAAYF,SAASC,eAAe,eACpCE,aAAcH,SAASC,eAAe,iBACtCG,qBAAsBJ,SAASC,eAAe,0BAC9CI,YAAaL,SAASC,eAAe,gBACrCK,YAAaN,SAASC,eAAe,iBAKjCM,EAAAA,GACJ,aAA0B,IAAdC,EAAc,uDAAV,EAAGC,EAAO,uDAAH,EAAG,UACxBC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,KAIPE,EAAAA,W,2DACJ,SAAaC,EAAQC,EAAMC,GACzB,MAAM,IAAIC,MAAJ,WAAcH,EAAd,aAAyBC,EAAzB,mBAAwCC,EAAxC,U,EAFJH,GAgGAK,EAAAA,WACJ,WAAYC,GAAwC,IAA/BC,EAA+B,uDAAtBF,EAAOG,cAAe,UAClD,EAAAH,EAFEA,EAEI,GAAN,KAAAA,EAAsBC,GAEtBP,KAAKO,QAAUA,EACfP,KAAKU,QAAUH,EAAQI,WAAW,MAClCX,KAAKY,MAAQJ,EAAOI,MACpBZ,KAAKa,OAASL,EAAOK,OACrBb,KAAKc,MAAQN,EAAOM,MACpBd,KAAKe,QAAUP,EAAOO,QAEtBf,KAAKgB,SAAShB,KAAKc,OACnBd,KAAKiB,Q,+BAGP,WACEjB,KAAKU,QAAQQ,UAAYlB,KAAKe,QAC9Bf,KAAKU,QAAQS,SAAS,EAAG,EAAGnB,KAAKY,MAAOZ,KAAKa,U,sBAG/C,WAAoB,IAAXC,EAAW,uDAAH,EACfd,KAAKU,QAAQI,MAAMA,EAAOA,O,EArBxBR,G,WA+BkBC,IACfA,aAAmBa,mBACtBnB,EAAMoB,MAAM,SAAU,UAAW,6B,EATd,CACrBT,MAAO,GACPC,OAAQ,GACRC,MAAO,EACPC,QAAS,Y,EA5BPT,mB,EAAAA,G,sFAqCN,IAAMgB,EAAa,IAAIhB,EAAOlB,EAASQ,YAAa,CAClDgB,MAAO,GACPC,OAAQ,GACRC,MAAO,MAqBE,IAlBLS,WACJ,aAAwD,IAA5CC,EAA4C,uDAArC,IAAI3B,EAAK,EAAG,GAAI4B,EAAqB,uDAAZ,IAAI5B,EAAQ,UACtDG,KAAK0B,cACL1B,KAAKwB,KAAOA,EACZxB,KAAKyB,OAASA,E,8BAGhB,SAAKf,GACHA,EAAQQ,UAAYlB,KAAK2B,MACzBjB,EAAQS,SAASnB,KAAKyB,OAAO3B,EAAGE,KAAKyB,OAAO1B,EAAGC,KAAKwB,KAAK1B,EAAGE,KAAKwB,KAAKzB,GACtE6B,QAAQC,IAAI,kB,yBAGd,WACE7B,KAAK2B,MAAQ,IAAMG,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,Q,EAd/DV,KAoBDW,KAAKZ,EAAWZ,U","sources":["webpack://tetris-game/./src/index.js"],"sourcesContent":["const elements = {\n  stopwatchDisplay: document.getElementById('stopwatch_display'),\n  stopButton: document.getElementById('stop_button'),\n  scoreDisplay: document.getElementById('score_display'),\n  nextTetrominoDisplay: document.getElementById('next_tetromino_display'),\n  gameOverlay: document.getElementById('game_overlay'),\n  gameDisplay: document.getElementById('game_display'),\n};\n\nconst [CW, CCW] = [1, 0];\n\nclass Vec2 {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass Throw {\n  static error(caller, type, message) {\n    throw new Error(`[${caller}] ${type} error: ${message}.`);\n  }\n}\n\nclass Matrix2D extends Array {\n  #size;\n\n  constructor(x, y) {\n    Matrix2D.#CHECK_DIMENSIONS(x, y);\n    super();\n    for (let row = y; row > 0; row--) this.push(new Array(x).fill(0));\n    this.#updateSize();\n  }\n  rotate(direction = 1) {\n    this.#transpose();\n    direction > 0 //\n      ? this.forEach(row => row.reverse())\n      : this.reverse();\n    this.#updateSize();\n  }\n  overlay(matrix, offset = new Vec2()) {\n    Matrix2D.#CHECK_MATRIX(matrix);\n\n    let x, y;\n    matrix.forEach((row, posY) => {\n      row.forEach((cell, posX) => {\n        y = posY + offset.y;\n        x = posX + offset.x;\n        if (cell !== 0 && this[y] && this[y][x] !== undefined)\n          this[y][x] = cell;\n      });\n    });\n  }\n  #transpose() {\n    const result = [];\n    this[0].forEach((_, x) => {\n      result.push([]);\n      this.forEach((_, y) => {\n        result[x].push(this[y][x]);\n      });\n    });\n    this.length = 0;\n    result.forEach(row => this.push(row));\n  }\n  static from(scheme) {\n    this.#CHECK_SCHEME(scheme);\n    const matrix = new Matrix2D(scheme[0].length, scheme.length);\n    scheme.forEach((row, y) => row.forEach((cell, x) => (matrix[y][x] = cell)));\n    return matrix;\n  }\n  #updateSize() {\n    this.#size = new Vec2(this[0].length, this.length);\n    this.#setSizeProperty();\n  }\n  #setSizeProperty() {\n    Object.defineProperty(this, 'size', {\n      value: this.#size,\n      writable: true,\n      enumerable: false,\n    });\n  }\n  static #CHECK_MATRIX(matrix) {\n    if (!matrix instanceof Matrix2D)\n      Throw.error('Matrix', 'Matrix', 'not a matrix');\n  }\n  static #CHECK_DIMENSIONS(x, y) {\n    if (x < 2) Throw.error('Matrix', 'Dimensions', 'X must be 2 or more');\n    if (y < 2) Throw.error('Matrix', 'Dimensions', 'Y must be 2 or more');\n  }\n  static #CHECK_SCHEME(scheme) {\n    if (!Array.isArray(scheme))\n      Throw.error('Matrix', 'Scheme', 'must be an array type');\n    if (scheme.length < 2)\n      Throw.error('Matrix', 'Scheme', 'must contain at least 2 rows');\n\n    const cellNumber = scheme[0].length;\n    if (!cellNumber)\n      Throw.error(\n        'Matrix',\n        'Scheme',\n        'unable to determine the number of cells'\n      );\n\n    scheme.forEach((row, i) => {\n      if (!Array.isArray(row))\n        Throw.error('Matrix', 'Scheme', `[${i}] must must be an array`);\n      if (row.length < 2)\n        Throw.error('Matrix', 'Scheme', `[${i}] must contain at least 2 cells`);\n      if (row.length !== cellNumber)\n        Throw.error('Matrix', 'Scheme', `[${i}] cell number must be equal`);\n    });\n  }\n}\n\nclass Canvas {\n  constructor(element, params = Canvas.defaultParams) {\n    Canvas.#CHECK_ELEMENT(element);\n\n    this.element = element;\n    this.context = element.getContext('2d');\n    this.width = params.width;\n    this.height = params.height;\n    this.scale = params.scale;\n    this.bgColor = params.bgColor;\n\n    this.setScale(this.scale);\n    this.clear();\n  }\n\n  clear() {\n    this.context.fillStyle = this.bgColor;\n    this.context.fillRect(0, 0, this.width, this.height);\n  }\n\n  setScale(scale = 1) {\n    this.context.scale(scale, scale);\n  }\n\n  static defaultParams = {\n    width: 20,\n    height: 20,\n    scale: 1,\n    bgColor: '#252525',\n  };\n\n  static #CHECK_ELEMENT(element) {\n    if (!element instanceof HTMLCanvasElement)\n      Throw.error('Canvas', 'Element', 'Not a canvas HTML element');\n  }\n}\n\nconst gameCanvas = new Canvas(elements.gameDisplay, {\n  width: 12,\n  height: 20,\n  scale: 20,\n});\n\nclass Cell {\n  constructor(size = new Vec2(2, 2), offset = new Vec2()) {\n    this.randomColor();\n    this.size = size;\n    this.offset = offset;\n  }\n\n  draw(context) {\n    context.fillStyle = this.color;\n    context.fillRect(this.offset.x, this.offset.y, this.size.x, this.size.y);\n    console.log('[cell] draw!');\n  }\n\n  randomColor() {\n    this.color = '#' + Math.floor(Math.random() * 16777215).toString(16);\n  }\n}\n\nlet cell = new Cell();\n\ncell.draw(gameCanvas.context);\n"],"names":["elements","stopwatchDisplay","document","getElementById","stopButton","scoreDisplay","nextTetrominoDisplay","gameOverlay","gameDisplay","Vec2","x","y","this","Throw","caller","type","message","Error","Canvas","element","params","defaultParams","context","getContext","width","height","scale","bgColor","setScale","clear","fillStyle","fillRect","HTMLCanvasElement","error","gameCanvas","Cell","size","offset","randomColor","color","console","log","Math","floor","random","toString","draw"],"sourceRoot":""}